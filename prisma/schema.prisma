// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Customer {
  id                   String        @id @default(uuid())
  type                 String        // residential, commercial, high-net-worth
  status               String        // prospect, active, completed, inactive
  firstName           String
  lastName            String
  company             String?
  email               String
  phone               String
  preferredCommunication String
  billingAddress      Address?
  properties          Property[]
  projects            Project[]
  interactions        Interaction[]
  tags                Tag[]
  notes               String?
  metrics             CustomerMetrics?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  customer  Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String  @unique
  property  Property?
}

model Property {
  id            String    @id @default(uuid())
  name          String
  type          String    // single-family, condo, commercial, multi-family, other
  address       Address?  @relation(fields: [addressId], references: [id])
  addressId     String?   @unique
  squareFootage Float
  bedrooms      Int?
  bathrooms     Int?
  yearBuilt     Int?
  photos        Photo[]
  documents     Document[]
  systems       SystemInstallation[]
  serviceHistory ServiceRecord[]
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String
  projects      Project[]
}

model Photo {
  id          String    @id @default(uuid())
  url         String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  uploadedAt  DateTime  @default(now())
  uploadedBy  String
}

model Document {
  id          String    @id @default(uuid())
  name        String
  url         String
  type        String
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  propertyId  String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId   String?
  uploadedAt  DateTime  @default(now())
  uploadedBy  String
}

model SystemInstallation {
  id          String    @id @default(uuid())
  type        String
  details     String
  installDate DateTime?
  lastService DateTime?
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
}

model ServiceRecord {
  id          String    @id @default(uuid())
  date        DateTime
  type        String
  description String
  technician  String
  cost        Float
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
}

model Project {
  id          String      @id @default(uuid())
  name        String
  description String
  status      String      // planning, in-progress, completed, on-hold, cancelled
  startDate   DateTime
  endDate     DateTime?
  property    Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  teamMembers ProjectTeamMember[]
  milestones  Milestone[]
  budget      Budget?
  documents   Document[]
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
}

model ProjectTeamMember {
  id          String    @id @default(uuid())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  teamMember  TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  teamMemberId String
}

model TeamMember {
  id        String    @id @default(uuid())
  name      String
  role      String
  email     String
  phone     String
  projects  ProjectTeamMember[]
}

model Milestone {
  id            String    @id @default(uuid())
  name          String
  description   String
  status        String    // pending, in-progress, completed, overdue
  dueDate       DateTime
  completedDate DateTime?
  assignedTo    String?
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

model Budget {
  id          String    @id @default(uuid())
  currency    String
  total       Float
  spent       Float
  remaining   Float
  lineItems   BudgetLineItem[]
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String    @unique
}

model BudgetLineItem {
  id          String    @id @default(uuid())
  description String
  amount      Float
  category    String
  budget      Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId    String
}

model Interaction {
  id          String    @id @default(uuid())
  type        String    // call, email, meeting, site-visit, other
  date        DateTime
  summary     String
  details     String
  followUpDate DateTime?
  followUpNotes String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
}

model CustomerMetrics {
  id                      String    @id @default(uuid())
  totalRevenue           Float
  projectsCompleted      Int
  avgResponseTime        Float
  lastInteraction        DateTime?
  nextScheduledInteraction DateTime?
  customer               Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId             String     @unique
}
